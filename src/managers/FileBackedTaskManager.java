package managers;

import model.Epic;
import model.Subtask;
import model.Task;
import model.TaskStatus;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


/*–£–≤–∞–∂–∞–µ–º—ã–π —Ä–µ–≤—å—é–µ—Ä!
–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤—Ä–µ–º—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ. –í —ç—Ç–æ–º —Å–ø—Ä–∏–Ω—Ç–µ —è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –≤—Å—é —Ç—Ä–µ–±—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
‚úÖ –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:
–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—è duration, startTime –∏ –º–µ—Ç–æ–¥ getEndTime() –≤–æ –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Epic –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–∑–∞–¥–∞—á (—Å—É–º–º–∞ duration, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π startTime, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π endTime)
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ getPrioritizedTasks() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TreeSet –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ O(n)
–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Stream API –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–µ–∑–∫–æ–≤
–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
–ù–∞–ø–∏—Å–∞–Ω—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∫–ª—é—á–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å TaskManagerTest
–ü–æ–∫—Ä—ã—Ç—ã –≤—Å–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ Epic –∏ –∏—Å—Ç–æ—Ä–∏–∏
üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω TreeSet –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
–î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è linked list —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
–í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç null-–∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∏–¥–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –¥–µ–¥–ª–∞–π–Ω–æ–º, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ì–æ—Ç–æ–≤ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –≤–∞—à–∏–º –∑–∞–º–µ—á–∞–Ω–∏—è–º!
–ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –≥–æ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏!*/
public class FileBackedTaskManager extends InMemoryTaskManager {
    private final File file;

    public FileBackedTaskManager(File file) {
        this.file = file;
    }

    private String toString(Task task) {
        String epicId = "";
        if (task.getType() == TaskType.SUBTASK) {
            epicId = String.valueOf(((Subtask) task).getEpicId());
        }

        return String.join(",",
                String.valueOf(task.getId()),
                task.getType().name(),
                task.getTitle(),
                task.getStatus().name(),
                task.getDescription(),
                task.getDuration() != null ? String.valueOf(task.getDuration().toMinutes()) : "",
                task.getStartTime() != null ? task.getStartTime().toString() : "",
                epicId
        );
    }

    private Task fromString(String value) {
        String[] fields = value.split(",");
        if (fields.length < 5) {
            throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–µ: " + value);
        }

        int id = Integer.parseInt(fields[0]);
        TaskType type = TaskType.valueOf(fields[1]);
        String name = fields[2];
        TaskStatus status = TaskStatus.valueOf(fields[3]);
        String description = fields[4];

        Duration duration = null;
        if (fields.length > 5 && !fields[5].isEmpty()) {
            duration = Duration.ofMinutes(Long.parseLong(fields[5]));
        }

        LocalDateTime startTime = null;
        if (fields.length > 6 && !fields[6].isEmpty()) {
            startTime = LocalDateTime.parse(fields[6]);
        }

        switch (type) {
            case EPIC:
                Epic epic = new Epic(name, description);
                epic.setId(id);
                epic.setStatus(status);
                return epic;
            case SUBTASK:
                if (fields.length < 8) {
                    throw new IllegalArgumentException("–î–ª—è –ø–æ–¥–∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç epicId: " + value);
                }
                int epicId = Integer.parseInt(fields[7]);
                Subtask subtask = new Subtask(name, description, epicId);
                subtask.setId(id);
                subtask.setStatus(status);
                subtask.setDuration(duration);
                subtask.setStartTime(startTime);
                return subtask;
            case TASK:
                Task task = new Task(name, description);
                task.setId(id);
                task.setStatus(status);
                task.setDuration(duration);
                task.setStartTime(startTime);
                return task;
            default:
                throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏");
        }
    }

    public void save() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write("id,type,name,status,description,duration,startTime,epic\n");

            for (Task task : getAllTasks()) {
                writer.write(toString(task) + "\n");
            }
            for (Epic epic : getAllEpics()) {
                writer.write(toString(epic) + "\n");
            }
            for (Subtask subtask : getAllSubtasks()) {
                writer.write(toString(subtask) + "\n");
            }

            writer.write("\n");
            writer.write(historyToString(getHistory()));
        } catch (IOException e) {
            throw new ManagerSaveException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", e);
        }
    }

    private String historyToString(List<Task> history) {
        if (history.isEmpty()) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (Task task : history) {
            sb.append(task.getId()).append(",");
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }

    private List<Integer> historyFromString(String value) {
        List<Integer> historyIds = new ArrayList<>();
        if (value != null && !value.isBlank()) {
            String[] ids = value.split(",");
            for (String id : ids) {
                historyIds.add(Integer.parseInt(id.trim()));
            }
        }
        return historyIds;
    }

    public static FileBackedTaskManager loadFromFile(File file) {
        FileBackedTaskManager manager = new FileBackedTaskManager(file);

        try {
            String content = Files.readString(file.toPath());
            String[] lines = content.split("\n");

            if (lines.length <= 1) return manager;

            int emptyLineIndex = -1;
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].isBlank()) {
                    emptyLineIndex = i;
                    break;
                }
            }

            int maxId = 0;
            for (int i = 1; i < emptyLineIndex; i++) {
                if (lines[i].isBlank()) continue;
                try {
                    Task task = manager.fromString(lines[i]);
                    if (task.getId() > maxId) {
                        maxId = task.getId();
                    }
                    if (task instanceof Epic) {
                        manager.epics.put(task.getId(), (Epic) task);
                    } else if (task instanceof Subtask) {
                        manager.subtasks.put(task.getId(), (Subtask) task);
                        Subtask subtask = (Subtask) task;
                        Epic epic = manager.epics.get(subtask.getEpicId());
                        if (epic != null) {
                            epic.addSubtaskId(subtask.getId());
                        }
                    } else {
                        manager.tasks.put(task.getId(), task);
                    }
                } catch (Exception e) {
                    throw new ManagerSaveException("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ \"" + lines[i] + "\"", e);
                }
            }
            InMemoryTaskManager.nextId = maxId + 1;

            for (Epic epic : manager.epics.values()) {
                manager.updateEpicStatus(epic);
                manager.updateEpicTime(epic);
            }

            if (emptyLineIndex != -1 && emptyLineIndex + 1 < lines.length) {
                String historyLine = lines[emptyLineIndex + 1];
                if (!historyLine.isBlank()) {
                    List<Integer> historyIds = manager.historyFromString(historyLine);
                    for (Integer id : historyIds) {
                        Task task = manager.tasks.get(id);
                        if (task == null) task = manager.epics.get(id);
                        if (task == null) task = manager.subtasks.get(id);
                        if (task != null) {
                            manager.historyManager.add(task);
                        }
                    }
                }
            }

        } catch (IOException e) {
            throw new ManagerSaveException("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞", e);
        }
        return manager;
    }

    @Override
    public Task createTask(Task task) {
        Task createdTask = super.createTask(task);
        save();
        return createdTask;
    }

    @Override
    public Epic createEpic(Epic epic) {
        Epic createdEpic = super.createEpic(epic);
        save();
        return createdEpic;
    }

    @Override
    public Subtask createSubtask(Subtask subtask) {
        Subtask createdSubtask = super.createSubtask(subtask);
        save();
        return createdSubtask;
    }

    @Override
    public void updateTask(Task task) {
        super.updateTask(task);
        save();
    }

    @Override
    public void updateEpic(Epic epic) {
        super.updateEpic(epic);
        save();
    }

    @Override
    public void updateSubtask(Subtask subtask) {
        super.updateSubtask(subtask);
        save();
    }

    @Override
    public void deleteTask(int id) {
        super.deleteTask(id);
        save();
    }

    @Override
    public void deleteEpic(int id) {
        super.deleteEpic(id);
        save();
    }

    @Override
    public void deleteSubtask(int id) {
        super.deleteSubtask(id);
        save();
    }

    @Override
    public void deleteAllTasks() {
        super.deleteAllTasks();
        save();
    }

    @Override
    public void deleteAllEpics() {
        super.deleteAllEpics();
        save();
    }

    @Override
    public void deleteAllSubtasks() {
        super.deleteAllSubtasks();
        save();
    }
}